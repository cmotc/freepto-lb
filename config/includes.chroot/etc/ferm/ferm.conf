
# ferm firewall rules
# http://ferm.foo-projects.org
domain (ip ip6){
  table filter {
    chain INPUT {
	policy DROP;
	# connection tracking
	mod state state INVALID DROP;
	mod state state (ESTABLISHED RELATED) ACCEPT;
	# allow local connections
	interface lo ACCEPT;
	# Allow Bittorrent and Bitcoind
	proto tcp dport (4433 4434 28333 29333) ACCEPT;
	proto udp dport 29333 ACCEPT;
	# (legacy) Allow peer connections to the i2p network via UDP
      # the rest is dropped by the above policy
    }
    # outgoing connections are not limited
    chain OUTPUT{
      policy DROP;
      # Tor is allowed to do anything it wants to.
      mod owner uid-owner debian-tor ACCEPT;
      # i2p is allowed to do anything it wants to.
      mod owner uid-owner i2psvc ACCEPT;
      # White-list access to Tor
      daddr 127.0.0.1 proto tcp syn dport 9050 ACCEPT;
      daddr 127.0.0.1 proto tcp syn mod multiport destination-ports (5353 9040 9050 9051 8118 9061 9062 9150 8123) ACCEPT;
      #White-list access to i2p
      daddr 127.0.0.1 proto tcp syn mod multiport destination-ports (2827 4444 4445 6668 7656 7657 7658 7659 7660 8998) ACCEPT;
      #White-list access to system DNS and Tor DNS, block all else
      daddr 127.0.0.1 proto udp dport (53 5353) ACCEPT;
      #White-list access to HTTP Proxies
      daddr 127.0.0.1 proto tcp syn dport (8118 8123) ACCEPT;
      #White-list access to BitTorrent
      proto (tcp udp) dport (6881 6882 6883 6885 6886 6887 6888 6889 28333 29333 51413) ACCEPT;
      #White-list access to CUPS
      daddr 127.0.0.1 proto tcp syn dport 631 ACCEPT;
      # White-list access to Monkeysphere
      daddr 127.0.0.1 proto tcp syn dport 6136 ACCEPT;
      # Local network connections should not go through Tor but DNS shall be
      # rejected.
      # (Note that we exclude the VirtualAddrNetwork used for .onion:s here.)
      daddr (10.0.0.0/8 172.16.0.0/12 192.168.0.0/16) @subchain "lan" {
        proto tcp dport domain REJECT;
        proto udp dport domain REJECT;
        ACCEPT;
      }
      #White-list access to for Twister
      daddr 127.0.0.1 proto (tcp udp) dport (28332) ACCEPT;
      daddr 127.0.0.1 proto (udp) dport (1900 29333 60177) ACCEPT;
      #White-list access for Tox
      daddr 127.0.0.1 proto (tcp udp) dport (55166 55167 55526 55177 55184) ACCEPT;
      #OK so I am going to make it difficult for you here. If you ABSOLUTELY
      #need to access the clearnet, uncomment the following 3 lines or compose
      #your own rules.
      #White-list access for common clearnet services
      #proto (tcp udp) dport 53 ACCEPT;
      #proto tcp dport (7 ftp http https ssh smtp whois 995 465 5222 5223 8010 5060 7078 9078) ACCEPT;
      #proto (tcp udp) dport 33434 ACCEPT;
      outerface lo{
	ACCEPT;
      }
    }
  }
}
table nat {
  chain PREROUTING {
    policy ACCEPT;
  }
  chain POSTROUTING {
    policy ACCEPT;
  }
  chain OUTPUT {
    policy ACCEPT;
    # .onion mapped addresses redirection to Tor.
    daddr 127.192.0.0/10 proto tcp REDIRECT to-ports 9040;
    # Redirect system DNS to Tor DNSport
    daddr 127.0.0.1 proto udp dport 53 REDIRECT to-ports 5353;
  }
}
# established/related connections
# domain (ip ip6) table filter chain (INPUT OUTPUT) mod state state (ESTABLISHED RELATED) ACCEPT;
domain (ip ip6) table filter chain FORWARD ACCEPT;
# log all other INPUT
domain (ip ip6) table filter chain INPUT {
    mod limit limit 3/min limit-burst 10 LOG log-prefix "INPUT-rejected: " log-level debug;
    REJECT;
}

